# import * from "./generated/prisma.graphql"

type Query {
  me: User!

  getleaderboard(
    where: UserOrderByInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!

  getunplayedmatches(season: Int!, round: Int!): [Match!]!

  feed(
    where: MatchOrderByInput
    orderBy: MatchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Match]!

  getUser(email: String!): User!
  getUsers(where: UserWhereInput!, orderBy: UserOrderByInput): [User]!
  getStats(email: String!): User!
  getMatches(email: String!): [Match]!
  getResult(player1: String!, player2: String!): [Match]!
  getPlayerMatches(player: String!, round: Int!, season: Int!): [Match]!
  statses(where: StatsWhereInput, orderBy: StatsOrderByInput): [Stats]!
  getallplayers: [User!]!
  matches(where: MatchWhereInput): [Match!]!
  getcurrent: [Current!]!
  getUserbyID(where: UserWhereUniqueInput!): User!
}

type Mutation {
  deactivate(email: String!, deactivated: Boolean!): User!
  setnullscoretozero(round: Int!, season: Int!): Match!
  resetpassword(email: String!, password: String!): User!
  forgotpassword(email: String!): User!
  signup(
    email: String!
    password: String!
    name: String!
    residentialcollege: String
  ): AuthPayload!

  login(email: String!, password: String!): AuthPayload!
  adminlogin(email: String!, password: String!): AuthPayload1!
  updateseason(
    data: SeasonUpdateInput!
    where: SeasonWhereUniqueInput!
  ): Season!
  submitmatch(
    player1: String!
    player2: String!
    player1set: Int!
    player2set: Int!
    round: Int!
    season: Int!
  ): Match!

  generateRound(round: Int!, season: Int!): [User]!
  generateSeason(season: Int!): Season!
  addplayer(player: String!, season: Int!): User!
  deleteplayer(player: String!, season: Int!): User!
  generateStats(round: Int!, season: Int!): Stats!
  updateinfo(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updatecurrent(round: Int!, season: Int!, timer: String!): Current!
  createcurrent(round: Int!, season: Int!, timer: String!): Current!
  adminsignup(email: String!, password: String!, name: String!): AuthPayload1!
}

type AuthPayload {
  token: String!
  user: User!
}

type AuthPayload1 {
  token: String!
  user: Admin!
}
